library CoCASL/CCS

%prec({__-__} <> {__->__})%
%% force parens when pretty printing E1-(n+1)->E3 
%prec({__+__} <> {__-__->__})% 
%prec({__||__} <> {__-__->__})% 

from Basic/Numbers get Nat
from Basic/SimpleDatatypes get Boolean

logic CoCASL

spec Action =
  %% Communications
  sort Name                                    %% Names
  free type Label ::= sort Name | bar(Name)    %% Labels
  free type Act ::= sort Label | tau           %% Actions

  op bar: Label -> Label
  forall a: Name
  . bar(bar(a))=a
end

spec ActionRelabelling = 

Action

then

  %% Restriction by a Set of Labels

  Boolean

then

  cofree { sort Set[Label];
           op __isIn__ : Label * Set[Label] -> Boolean }

then 
 
  %% Relabelling by Functions on Act

  cofree { sort Fun[Label];
           op eval : Fun[Label] * Label -> Label }

then 

  sort Relabelling = {f: Fun[Label] . 
       forall l: Label   . eval(f,bar(l)) = bar(eval(f,l))
    /\ forall l,k: Label . (eval(f,l) = eval(f,k) => k=l)
    /\ forall l: Label   . exists k:Label . l=eval(f,k)
  }
end

spec CCS =

ActionRelabelling

then

  %% CCS Syntax: AgentExpressions

  sort AgentVariable 
  sort AgentConstant

  free type
    AgentExpression ::=
        sort AgentVariable 
    |   sort AgentConstant
    |   0                                        %% inactive agent
    |   __->__ (Act; AgentExpression)            %% Prefix
    |   __+__ (AgentExpression;AgentExpression)  %% Summation; finite sums
    |   __||__ (AgentExpression;AgentExpression) %% Composition
    |   __-__  (AgentExpression;Set[Label])      %% Restriction
    |   rel(AgentExpression;Relabelling)          %% Relabelling
    |   fix(AgentVariable;AgentExpression)        %% Recursion; only 1 comp.

  %% Definition of AgentConstants:

  op definitionOf : AgentConstant -> AgentExpression

  %% Substitution:
  op __{__/__}: AgentExpression * AgentExpression * AgentVariable
                -> AgentExpression

  forall P:AgentExpression; X:AgentVariable
  . forall Y:AgentVariable .         Y{P/X} = P when Y=X else
                                              Y 
  . forall C:AgentConstant .         C{P/X} = C
  .                                  0{P/X} = 0
  . forall a:Act; E:AgentExpression. (a -> E){P/X} = a -> (E{P/X})
  . forall E,F:AgentExpression.      (E+F){P/X} = (E{P/X}) + (F{P/X})
  . forall E,F:AgentExpression.      (E||F){P/X} = (E{P/X})||(F{P/X})
  . forall E:AgentExpression; 
           L:Set[Label].             (E-L){P/X} = ( E{P/X} ) - L
  . forall E:AgentExpression; 
           f:Relabelling.            rel(E,f){P/X}   = rel(E{P/X},f)
  . forall Y:AgentVariable;
           E:AgentExpression.        fix(Y,E){P/X} = fix(Y,E) when  X=Y else
                                                     fix(Y,E{P/X})
then

  %% Transition System induced by AgentExpressions

  free{
  
  pred __-__->__ : AgentExpression * Act * AgentExpression

  axioms

  %% (Act):
  forall a:Act; E:AgentExpression. 

    %[-------------]%
      (a->E) -a-> E 

  %% (Sum1): 
  forall E,E',F:AgentExpression; a: Act .

       E -a-> E'       =>
    %[-------------]%
      (E+F) -a-> E' 

  %% (Sum2): 
  forall E,F,F':AgentExpression; a: Act .

       F -a-> F'       =>
    %[-------------]%
      (E+F) -a-> F' 


  %% (Com1): 
  forall E,E',F:AgentExpression; a: Act .

       E -a-> E'       =>
    %[-------------]%
      (E||F) -a-> E' 

  %% (Com2): 
  forall E,F,F':AgentExpression; a: Act .

       F -a-> F'       =>
    %[-------------]%
      (E||F) -a-> F' 

  %% (Com3): 
  forall E,E',F,F':AgentExpression; l: Label . 

       E -l-> E' /\  F -bar(l)-> F'          =>
    %[-----------------------------]%
           (E||F) -tau-> (E'||F')

  %% (Res):
  forall E,E': AgentExpression; L: Set[Label]; l:Label .
  
    (l isIn L = False) /\ ( bar(l) isIn L = False ) /\ 

       E -l-> E'        =>  
    %[--------------]%
      (E-L) -l-> E' 

  %% (Rel-Label):
  forall E,E': AgentExpression; f: Relabelling; l:Label .

            E -l-> E'                  =>
    %[-------------------------]%
       rel(E,f) -eval(f,l)-> rel(E',f)


  %% (Rel-tau):
  forall E,E': AgentExpression; f: Relabelling .

            E -tau-> E'               =>
    %[--------------------]%
       rel(E,f) -tau-> rel(E',f)

  %% (Con):
  forall C: AgentConstant; E,E': AgentExpression; 
         f: Relabelling;  a:Act .

         definitionOf(C)=E /\  

       E -a-> E'    => 
    %[----------]%
       C -a-> E'
  
%% (Rec): 
  forall X:AgentVariable; E,E':AgentExpression; a:Act .

       E{fix(X,E)/X} -a-> E'   => 
    %[------------------------]%
        fix(X,E) -a-> E'   

  }

then

  %% First Equivalence on CCS-Agents: Strong Bisimulation

  generated type Process ::= semBisim (AgentExpression)
  pred __-__->__ : Process * Act * Process

  
   forall E,E':AgentExpression; a: Act .
   E -a-> E' <=> semBisim(E) -a-> semBisim(E')
  
  cogenerated { sort Process
                pred __-__->__ : Process * Act * Process
              }

  pred __~__ : AgentExpression * AgentExpression
  
     forall E,F: AgentExpression .
     E ~ F <=> semBisim(E)=semBisim(F)

then
  Nat
then 
  
  %% Second Equivalence on CCS-Agents: Weak Bisimulation

  generated type WProcess ::= semWeakBisim (AgentExpression)

  free type Act' ::= sort Label | epsilon
  pred __-__->__ : WProcess * Act' * WProcess

  %% iterate tau-Transitions on AgentExpressions:

  pred __-__->__ : AgentExpression * Nat * AgentExpression
  forall E,E1,E3:AgentExpression; n: Nat
  . E -0-> E
  . E1-(n+1)->E3 <=> 
    exists E2:AgentExpression. E1-n->E2 /\ E2 - tau -> E3

  pred __--->__: AgentExpression * AgentExpression
  forall E1,E2:AgentExpression
  . E1 ---> E2 <=> exists n:Nat .  E1-n->E2

  forall E,E':AgentExpression; l: Label

  . semWeakBisim(E) -l-> semWeakBisim(E') <=> 
      exists E1,E2:AgentExpression .          
        E ---> E1 /\ (E1-l->E2) /\ E2 ---> E'

  . semWeakBisim(E) - epsilon -> semWeakBisim(E') <=> E ---> E' 

  cogenerated { sort WProcess
                pred __-__->__ : WProcess * Act' * WProcess
              }

  pred __~~__ : AgentExpression * AgentExpression
  axiom
     forall E,F: AgentExpression .
     E ~~ F <=> semWeakBisim(E)=semWeakBisim(F)

then 

  %% third equivalence on CCS-Agents: Observation Congruence

  pred __==__==>__ : AgentExpression * Act * AgentExpression

  forall E,E':AgentExpression; alpha: Act
  . E ==alpha==> E' <=> 
      exists E1,E2: AgentExpression .          
        E ---> E1 /\ (E1-alpha->E2) /\ E2 ---> E'

  pred __==__ : AgentExpression * AgentExpression
  forall P,Q: AgentExpression 
  . P==Q <=> 
   forall alpha: Act .
     (forall P': AgentExpression. P -alpha-> P' => 
       (exists Q': AgentExpression. Q ==alpha==> Q' /\ P' ~~ Q')
     )
     /\
     (forall Q': AgentExpression. Q -alpha-> Q' => 
       (exists P': AgentExpression. P ==alpha==> P' /\ P' ~~ Q')
     )


end


