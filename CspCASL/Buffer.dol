library Buffer

logic CASL

spec List =
  sort Elem
  free type List ::= nil | cons(Elem; List)
  ops last: List -> ? Elem;
      rest: List -> ? List
end

logic CspCASL

spec Buffer =
  data List
  channel read, write : Elem
  process Buf(List): read, write, List;
          EmptyBuffer : read,write, List;
          Buf(l)= read? x :: Elem -> Buf( cons(x,nil) ) []
                  (if l=nil then STOP else write!last(l) -> Buf( rest(l) ))
          EmptyBuffer = Buf(nil)
end

spec Buffer2 =
  data List
  channel read, write : Elem
  process Buf(List): read, write, List;
          EmptyBuffer : read,write, List;
          Buf(l)= Buf(l)
          EmptyBuffer = Buf(nil)
end

view v : Buffer to Buffer2
end


%[
logic Modal

spec FairBuffer =
  Buffer
then %implies
  . true
  %% . A G F exists x:Elem . <write.x> true
%%  {}
end
]%
