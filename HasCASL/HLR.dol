library HasCASL/HLR

from HasCASL/Categories get Category, Pushout

logic HasCASL

spec HLRCategory = 
  {Pushout[Category]
then
  sort M < Mor}
reveal sorts Ob, Mor, M, ops id, dom, cod, __o__
end

spec Transformation[HLRCategory] =
  Pushout[Category]
then
  pred  POComplement  : Mor * Mor * Ob
  forall o: Ob; f,h:Mor
  . POComplement (f,h,o) <=> 
    exists g,k : Mor . (h,k) = f pushout g /\ dom k = o

  type Rules = {(l,r): M * M . dom l = dom r}

  ops transform: Rules * Mor ->? Ob;
  
  forall p : Rules; g1 : Mor
  . let (l,r) = p 
    in
    def transform(p,g1) <=>
        exists g2,g3,c1,c2 : Mor . POComplement (l,g1,dom c1)
    /\ (forall o1,o2 : Ob . POComplement (l,g1,o1) /\ POComplement (l,g1,o2)
         => o1 = o2)
    /\ (g1,c1) = l pushout g2
    /\ (g3,c2) = r pushout g2
  
   . let (l,r) = p
    in
    def transform(p,g1) => 
    exists g2,g3,c1,c2 : Mor . 
       (g1,c1) = l pushout g2
    /\ (g3,c2) = r pushout g2
    /\ transform(p,g1) = cod g3
end
