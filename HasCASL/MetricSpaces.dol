library HasCASL/MetricSpaces

%author: T. Mossakowski, S. Woelfl
%date: 2005-10-11

from HasCASL/Set get Set
from HasCASL/Real get Real

logic HasCASL

spec MetricSpace =
     Real
then
     sort S
     op d:S*S->Real
     var x,y,z:S
     . d(x,y) = 0 <=> x = y
     . d(x,y) = d(y,x)
     . d(x,z) <= d(x,y) + d(y,z)
end

spec ExtMetricSpaceByOpenDiscs[MetricSpace] given Set =
  op openDisc(x:S;r:Real) : Set S = \y:S . d(x,y)<r
  type OpenDiscs = {X:Set S . exists x:S;r:Real . X=openDisc(x,r)}
end

%(
spec OpenDiscs[MetricSpace] = %def
local Set
within
     op openDisc(r:Real;x:S) : Set S = \y:S . d(x,y)<r
     type OpenDisc = {X:Set S . exists r:Real;x:S . r > 0 /\ X=openDisc(r,x)}
     preds __disjoint__,__subset__: OpenDisc * OpenDisc
end
)%


spec ExtMetricSpaceByOpenSets[MetricSpace] given Set =
     ExtMetricSpaceByOpenDiscs[MetricSpace]
then %def
     pred Open : Set S
     type OpenSets = {X:Set S . Open(X)}
     forall X:Set S
     . Open(X) <=> forall x:S . x isIn X =>
                        exists r:Real . openDisc(x,r) subset X
end

spec ExtMetricSpaceByClosedDiscs[MetricSpace] given Set =
  op closedDisc(x:S;r:Real) : Set S = \y:S . d(x,y)<=r
  type ClosedDiscs =
        {X:Set S . exists x:S;r:Real . not r=0 /\ X=closedDisc(x,r)}
end

spec RichMetricSpace =
    ExtMetricSpaceByOpenDiscs[MetricSpace]
and
    ExtMetricSpaceByClosedDiscs[MetricSpace]
end
