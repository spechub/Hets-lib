library HasCASL/Real3D/SolidWorks/SolidWorks
version 0.2


%author: E. Schulz
%date: 12-12-2008

logic HasCASL

from HasCASL/StructuredDatatypes get List

from HasCASL/Real3D/Basics get AffineRealSpace3DWithSets

%[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                                                  %%
%%                       The SolidWorks base objects                %%
%%                                                                  %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%]%


%[ The type hierarchy:

          SWObject
            |  | \
            |  |  \
            |  |   SWFeature
            |  |      |
            |  |      | constructed of
            |  |      |
            |  \   SWSketch---------------------------
            \   \     |						SWSkchCtrts
             \   \    | list of				| list of
              \   \   |						| 
               \   SWSketchObject				SWSkchCtrtObject 
                \     |						|
                 \    |						|
                  \   |						|
                   SWLine, SWArc and SWSpline		SWLineCtrt, SWArcCtrt, SWSplineCtrt
             

]%

spec SolidWorks = AffineRealSpace3DWithSets and List then

     free type
     SWPlane ::= SWPlane(SpacePoint:Point;NormalVector:VectorStar;InnerCS:Vector); %(SWPlane datatype)%

     free type
     SWArc ::= SWArc(Center:Point;Start:Point;End:Point);  %(SWArc datatype)%

     free type
     SWLine ::= SWLine(From:Point;To:Point);  %(SWLine datatype)%

     free type
     SWSpline ::= SWSpline(Points:List Point);  %(SWSpline datatype)%

     free type
     SWSketchObject ::= type SWArc | type SWLine | type SWSpline ;  %(SWSketchObject datatype)%

     free type
     SWSketch ::= SWSketch(Objects:List SWSketchObject;Plane: SWPlane);  %(SWSketch datatype)%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%Here is the new Constraint stuff%%%%%%%%%%%%%%%%%%%%%%%%%%%
     free type
     SWSkchCtrtParam ::= sgHORIZONTAL
		       | sgHORIZPOINTS | sgVERTICAL | sgVERTPOINTS | sgCOLINEAR
		       | sgCORADIAL | sgPERPENDICULAR | sgPARALLEL | sgTANGENT
		       | sgCONCENTRIC | sgCOINCIDENT | sgSYMMETRIC | sgATMIDDLE
		       | sgATINTERSECT | sgATPIERCE | sgFIXED | sgANGLE
		       | sgARCANG180 | sgARCANG270 | sgARCANG90 | sgARCANGBOTTOM
		       | sgARCANGLEFT | sgARCANGRIGHT | sgARCANGTOP | sgDIAMETER
		       | sgDISTANCE | sgSAMELENGTH | sgOFFSETEDGE | sgSNAPANGLE
		       | sgSNAPGRID | sgSNAPLENGTH | sgUSEEDGE ;  %(SWSkchCtrtParam datatype)%

     free type
     SWSkchCtrtStatus ::= Under_constrained | Fully_constrained | Over_constrained
					    | No_solution | Autosolve_off ;  %(SWSkchCtrtStatus datatype)%

%[
%% duplication of structures
     free type
     SWArcCtrt ::= SWArcCtrt(Objects:List SWSkchCtrtParam);  %(SWArcCtrt datatype)%

     free type
     SWLineCtrt ::= SWLineCtrt(Objects:List SWSkchCtrtParam);  %(SWLineCtrt datatype)%

     free type
     SWSplineCtrt ::= SWSplineCtrt(Objects:List SWSkchCtrtParam);  %(SWSplineCtrt datatype)%

     free type
     SWSkchCtrtObject ::= type SWArcCtrt | type SWLineCtrt | type SWSplineCtrt ;  %(SWSkchCtrtObject datatype)%
]%


%% condensed form, a link is missing to which objects the constraints belong

     free type
     SWSkchCtrtObject ::= SWSkchCtrtObject(Objects:List SWSkchCtrtParam);  %(SWSkchCtrtObject datatype)%

     free type
     SWSkchCtrts ::= SWSkchCtrts(SkchCtrtStatus: SWSkchCtrtStatus;Objects:List SWSkchCtrtObject);  %(SWSkchCtrts datatype)%


     free type
     SWExtrusion ::= SWExtrusion(Sketch:SWSketch;
				 Depth:Real);
%[				 DraftAngle:Real;
				 DraftOutward:Logical;
				 DraftWhileExtruding:Logical;
				 EndCondition:Real;
				 WallThickness:Real;
				 IsBaseExtrude:Logical;
				 IsBossFeature:Logical;
				 IsThinFeature:Logical);
]%  %(SWExtrusion datatype)%


     free type
     %% These Features are missing: Revolution, Sweep, Loft, Chamfer
     SWFeature ::= type SWExtrusion;  %(SWFeature datatype)%

     free type
     SWObject ::= type SWSketchObject
		| type SWSketch
		| type SWPlane
		| type SWFeature; %(SWObject datatype)%

     ops
 
     %% the base objects of SolidWorks
     E1:SWPlane =
     SWPlane(P(0,0,0),V(0,0,1) as VectorStar,V(1,0,0));
     %(E1 def)%
     E2:SWPlane =
     SWPlane(P(0,0,0),V(0,1,0) as VectorStar,V(1,0,0));
     %(E2 def)%
     E3:SWPlane =
     SWPlane(P(0,0,0),V(1,0,0) as VectorStar,V(0,1,0));
     %(E3 def)%

end


spec SolidWorksSemanticConstructors = AffineRealSpace3DWithSets then
     ops
	 %{ The following part provides a basis for the
	 semantics of the solid works objects }%

	 %{ The line from p1 to p2 }%
	 VLine(p1:Vector;p2:Vector):VectorSet
	  = image(\y:Real .! p1 + (y*(p2-p1)), closedinterval(0,1)); %(VLine constr)%

	 %{ Normalize the given Vector and scale it by the scalar }%
	 VWithLength(v:Vector;s:Real):Vector
	  = v when (v=0) else (s / (||v|| as NonZero))*v; %(VWithLength constr)%

	 %{ The plane orthogonal to the normal vector }%
	 VPlane(normal:Vector):VectorSet
	  = \y:Vector . orth(y,normal); %(VPlane constr)%

	 %{ The plane spanned by the given to axes }%
	 VPlane2(axis1:Vector;axis2:Vector):VectorSet
          = VPlane(axis1 # axis2); %(VPlane2 constr)%

	 %{ The connected set containing the given point and separated 
	 by the given frontier }%
	 VConnected(frontier:VectorSet;point:Vector):VectorSet
	  = frontier when (frontier point) else 
	       \y:Vector . VLine(point,y) intersection frontier = emptySet; %(VConnected constr)%

	 %{ The halfspace separated by the plane defined
	 by the given normal vector, where the normal vector points to. }%
	 VHalfSpace(normal:Vector):VectorSet
	  = VConnected(VPlane normal, normal); %(VHalfSpace constr)%

	 %{ As VHalfSpace but including the resulting VPlane. }%
	 VHalfSpace2(normal:Vector):VectorSet
	  = VConnected(VPlane normal, normal) union (VPlane normal); %(VHalfSpace2 constr)%

	 %{ The ball with radius r }%
	 VBall(r:Real):VectorSet
	  = \y:Vector .  ||y|| <= r; %(VBall constr)%

	 %{ The circle as intersection of a plane with a ball }%
	 VCircle(r:Real;axis:Vector):VectorSet
	  = VPlane(axis) intersection VBall(r); %(VCircle constr)%


	 %{ This action attaches the given vectors to the given point
	 and thus creates a PointSet }%
	 ActAttach(point:Point;vectors:VectorSet):PointSet
	  = point + vectors; %(ActAttach constr)%

	 %{ This action adds points to the given points by moving along
	 the axis }%
	 ActExtrude(axis:Vector;points:PointSet):PointSet
	  = \x:Point . exists l:Real. exists y:Point.
	      l isIn closedinterval(0,1) /\
	      y isIn points /\ x= y + l * axis; %(ActExtrude constr)%
then %implies

	 %{ The following part provides some basic facts about
	 these constructor }%
	 vars v:Vector;s:Real

	 . ||v|| = s => VWithLength(v,s) = v %(vwl identity)%

	 . not (v=0) => ||VWithLength(v,s)|| = abs(s) %(vwl length)%

	 . lindep(v, VWithLength(v,s)) %(vwl lindep)%

end


spec SolidWorksWithSemantics = SolidWorks and SolidWorksSemanticConstructors
then
     ops

     %% i = interpretation for solid works features
     i:SWFeature->PointSet;

     %% i = interpretation for solid works sketches
     i:SWSketch->PointSet;

     %% i = interpretation for solid works sketch objects
     is:SWSketchObject*SWPlane->PointSet;
     is:(List SWSketchObject)*SWPlane->PointSet;

     %% i = interpretation for solid works planes
     i:SWPlane->PointSet;

     vars o,x,y,z:Point; n:VectorStar; ics:Vector; l:Real; sk: SWSketch;
	  plane:SWPlane; sko: SWSketchObject; skos: List SWSketchObject

     . i(SWPlane(o,n,ics)) = ActAttach(o, VPlane(n));
     %(semantics for Planes)%

     . is([], plane) = emptySet; %(semantics for SketchObject lists-BaseCase)%
     . is(sko :: skos, plane) = is(sko, plane) union is(skos, plane);
     %(semantics for SketchObject lists-RecursiveCase)%

     . is(SWArc(x,y,z), plane) =
       let r1 = vec(x, y);
	   ball = ActAttach(x, VBall( ||r1|| ));
	   planeI = i(plane)
       in ball intersection planeI; %(semantics for Arcs)%

     . i(SWSketch(skos, plane)) = is(skos, plane); %(semantics for Sketches)%

     . i(SWExtrusion(sk, l)) =
       ActExtrude(VWithLength(NormalVector(Plane(sk)), l), i(sk));
       %(semantics for ArcExtrusion)%
end
