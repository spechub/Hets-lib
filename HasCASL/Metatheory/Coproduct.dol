library HasCASL/Metatheory/Coproduct

%prec {__when__else__} <> {if__then__else__}

logic HasCASL

spec Sums =
vars a, b, c: Type
type Sum a b
ops  inl: a -> Sum a b;
     inr: b -> Sum a b;
     sumcase: (a ->? c) -> (b ->? c) -> Sum a b ->? c;
     bot: ?a
vars f: a ->? c; g: b ->? c; h: Sum a b ->? c;
. h = sumcase f g <=>
  forall x: a; y: b . h (inl x) = f x /\ h (inr y) = g y
. not def (bot : ?a)
. sumcase inl inr = \ z : Sum a b . z %implied

then %def
vars a, b: Type
ops  outl: Sum a b -> a;
     outr: Sum a b -> b
. outl = sumcase (\ x: a . x) (\ y: b . bot)
. outr = sumcase (\ x: a . bot) (\ y: b . y)

type Bool := Sum Unit Unit
vars p: Bool; x,w: a
ops  True, False: Bool;
     if__then__else__ : Bool * a * a -> a
     . True = inl ()
     . False = inr ()
     . if p then x else w = sumcase (\ . x) (\ . w) p

spec While = Sums with Bool, if__then__else__ then
type s
ops  while: (s -> Bool) -> (s ->? s) -> s ->? s
pred __ <= __ (q, r: s ->? s) <=> forall y: s . q y = r y res q y
vars b: s -> Bool; p: s ->? s; x: s
. let F = \ (q: s ->? s) (x: s) . if b x then x else q (p x);
      w = while b p
  in F w = w /\ forall q: s ->? s . F q = q => w <= q
