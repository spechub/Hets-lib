library Examples/List

spec Elem =
  sort Elem
end

spec List[Elem] = 
  free type
    List[Elem] ::=  [] |  __ :: __ (Elem; List[Elem])

  ops __ ++ __ : List[Elem] * List[Elem] -> List[Elem];
      reverse:     List[Elem] -> List[Elem];

  pred null : List[Elem]

  forall x,y: Elem;  K,L: List[Elem]
  . [] ++ K = K                       %(concat_nil_List)%
  . (x::L) ++ K = x :: (L ++ K)       %(concat_NeList_List)%
  . reverse([])=[]                          %(reverse_nil)%
  . reverse(x::L) = reverse(L) ++ (x::[])   %(reverse_NeList)%
  . null(L) <=> L=[]     %(null_def)%

then %implies
  forall K,L: List[Elem]
  . reverse(K++L) = reverse(L)++reverse(K)
  . null(L) <=> null(reverse(L))
end

spec Monoid =
  sort Elem
  ops  e: Elem;
       __ * __:Elem * Elem -> Elem, assoc, unit e
end

view MonoidAsList : Monoid to List[sort Elem] =
   Elem |-> List[Elem],
   e |-> [],
   __*__ |-> __++__
end

spec Nat =
  free type Nat ::= 0 | suc(Nat)
end

spec NatList =
  List[Nat]
end
