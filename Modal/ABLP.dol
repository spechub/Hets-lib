library ABLP

logic Modal

spec ABLP =
  sort Principal
  ops  1 : Principal;
       __&__ : Principal * Principal -> Principal, assoc, comm, idem;
       __|__ : Principal * Principal -> Principal, assoc, unit 1;
  pred __==>__ : Principal * Principal
  forall A,B,C : Principal
  . (A|B) & C = (A&C) | (B&C)
  term modality Principal   {
    forall A,B : Principal . [A & B] s <=> [A] s /\ [B] s;
    forall A,B : Principal . [B|A] s <=> [B] [A] s;
    forall A,B : Principal . A==>B => [A] s => [B] s
  }
end

spec test =
  ABLP then
  op P,Q:Principal
  pred p,q:()
  . [P] p => [Q] q
  . <P> p => <Q> q
  . [P|Q] p <=> [Q|P] p
end
