library Calculi/Algebra/RelationAlgebraConstr
version 0.1
%author: S. Woelfl
%date: 16-06-2005

%(
    This library contains specifications that describe how a relation
    algebra can be built from a finite set of base relations and a composition
    table.
)%


%left_assoc __cup__,__cap__
%prec {__cup__} < {__cmps__}
%prec {__cmps__} < {__cmpl__}


from Basic/Numbers get Nat
%% from Basic/StructuredDatatypes get Set
from Calculi/Algebra/Set get Set
from Calculi/Algebra/BooleanAlgebra get
        BooleanAlgebra,
        AtomicBooleanAlgebra,
        ExtBooleanAlgebraByOrderRelations
from Calculi/Algebra/RelationAlgebra get
        NonAssocRelationAlgebra,
        RelationAlgebra,
        AtomicRelationAlgebra,
        AtomicNonAssocRelationAlgebra

from Calculi/Algebra/RelationAlgebraSymbolic get
        CompositionTable,
        GroundingCompositionTable,
        SetRepresentationOfRelations,
        ConstructPseudoRelationAlgebra,
        ConstructedPseudoRelationAlgebra






%( New relation algebras from others )%


spec CartProdOfPseudoRelationAlgebras [NonAssocRelationAlgebra with Rel |-> Rel1]
                [NonAssocRelationAlgebra with Rel |-> Rel2]
= %mono
     free type Rel ::= <__-__> (first:Rel1;second:Rel2)
     forall x,y:Rel
     . x = y <=> first(x) = first(y) /\ second(x) = second(y)

then %def
     ops __cup__,__cap__,__cmps__: Rel * Rel -> Rel;
         compl__,inv__: Rel -> Rel;
         0,1,id:Rel
     forall x,y:Rel
     . x cup y = <(first(x) cup first(y))-(second(x) cup second(y))>
     . x cap y = <(first(x) cap first(y))-(second(x) cap second(y))>
     . x cmps y = <(first(x) cmps first(y))-(second(x) cmps second(y))>
     . compl(x) = <compl(first(x))-compl(second(x))>
     . inv(x) = <inv(first(x))-inv(second(x))>
     . 0 = <0-0>
     . 1 = <1-1>
     . id = <id-id>
end


view NonAssocRelationAlgebra_from_CartProdOfPseudoRelationAlgebras
        [NonAssocRelationAlgebra with sort Rel |-> Rel1]
        [NonAssocRelationAlgebra with sort Rel |-> Rel2] :
     NonAssocRelationAlgebra
to   CartProdOfPseudoRelationAlgebras
        [NonAssocRelationAlgebra with sort Rel |-> Rel1]
        [NonAssocRelationAlgebra with sort Rel |-> Rel2]
end


spec SelfCartProdOfPseudoRelationAlgebra [NonAssocRelationAlgebra with Rel |-> Rel0] =
     CartProdOfPseudoRelationAlgebras
        [NonAssocRelationAlgebra with Rel |-> Rel0]
        [NonAssocRelationAlgebra with Rel |-> Rel0]
end


view NonAssocRelationAlgebra_from_SelfCartProdOfPseudoRelationAlgebra
        [NonAssocRelationAlgebra with sort Rel |-> Rel0] :
     NonAssocRelationAlgebra
to   SelfCartProdOfPseudoRelationAlgebra
        [NonAssocRelationAlgebra with sort Rel |-> Rel0]
end


%(
spec SelfCartProdRelationAlgebra [RelationAlgebra] =
     generated type RelP ::= __-__ (first:Rel;second:Rel)
     forall x,y,u,v:RelP
     . x-u = y-v <=> x = y /\ u = v
     forall x,y:RelP
     . x = y <=> first(x) = first(y) /\ second(x) = second(y)

then %def
     ops __cup__,__cap__,__cmps__: RelP * RelP -> RelP;
         compl__,inv__: RelP -> RelP;
         0,1,id:RelP
end
)%
