library Calculi/Algebra/FuzzySystems
version 0.1
%authors: Regivan Hugo Nunes Santiago, Christian Maeder
%date: 2008-06-24
%email: Christian.Maeder@dfki.de

%{
    This library defines some basic concepts for fuzzy systems
}%

%display  __intersection__ %LATEX __\cap__
%display  __intersection2__ %LATEX __\cap__
%display  __union__        %LATEX __\cup__
%display  __subseteq__     %LATEX __\subseteq__
%display  __subset__       %LATEX __\subset__

from Basic/Numbers get Rat

%% * Preliminaries

%% take a fixed, rational unit interval
spec UnitInterval = Rat
then sort UnitInterval = { x : Rat . 0 <= x /\ x <= 1 }
     ops 0, 1 : UnitInterval

%{ any monotone, symmetric and associative, binary junctor called J
   as basis to define t-norms and t-conorms }%
spec MonotoneJunctor = UnitInterval
then
     op J : UnitInterval * UnitInterval -> UnitInterval, comm, assoc
     vars x, y, z, w : UnitInterval
     . x <= y /\ w <= z => J(x, w) <= J(y, z) %(monotonicity)%

%% ** T-Norms, examples, properties

%% a t-norm has the boundary 1 and is called T
spec TNorm = MonotoneJunctor with J |-> T
then forall x : UnitInterval . T(x, 1) = x %(boundary_1)%

%% standard or Zadeh T-Norm
spec T_Z = TNorm
then forall x, y : UnitInterval . T(x, y) = min(x, y) as UnitInterval

%% probabilistic conjunction
spec T_P = TNorm
then forall x, y : UnitInterval . T(x, y) = x * y as UnitInterval

%% bounded difference
spec T_B = TNorm
then forall x, y : UnitInterval . T(x, y) = max(0, (x + y) - 1) as UnitInterval

%% drastic conjunction
spec T_D = TNorm
then forall x, y : UnitInterval
     . T(x, y) = x when y = 1 else y when x = 1 else 0

spec TNormProps = TNorm
and  T_Z with T |-> T_Z
and  T_P with T |-> T_P
and  T_B with T |-> T_B
and  T_D with T |-> T_D
then %implies
     vars x, y : UnitInterval
     . T_P(x, y) <= T_Z(x, y)
     . T_B(x, y) <= T_P(x, y)
     . T_D(x, y) <= T_B(x, y)
     . T_D(x, y) <= T(x, y)
     . T(x, y) <= T_Z(x, y)

%% ** T-Conorms, examples, properties

%% a t-conorm has the boundary 0 and is called C
spec TConorm = MonotoneJunctor with J |-> C
then forall x : UnitInterval . C(x, 0) = x %(boundary_0)%

%% standard or Zadeh disjunction
spec C_Z = TConorm
then forall x, y : UnitInterval . C(x, y) = max(x, y) as UnitInterval

%% probabilistic disjunction or algebraic sum
spec C_P = TConorm
then forall x, y : UnitInterval . C(x, y) = ((x + y) - x * y) as UnitInterval

%% bounded sum
spec C_B = TConorm
then forall x, y : UnitInterval . C(x, y) = min(1, x + y) as UnitInterval

%% drastic disjunction
spec C_D = TConorm
then forall x, y : UnitInterval
     . C(x, y) = x when y = 0 else y when x = 0 else 1

spec TConormProps = TConorm
and  C_Z with C |-> C_Z
and  C_P with C |-> C_P
and  C_B with C |-> C_B
and  C_D with C |-> C_D
then %implies
     vars x, y : UnitInterval
     . C_Z(x, y) <= C_P(x, y)
     . C_P(x, y) <= C_B(x, y)
     . C_B(x, y) <= C_D(x, y)
     . C(x, y) <= C_D(x, y)
     . C_Z(x, y) <= C(x, y)

%% ** Other basics

%% an underspecified complement over the unit interval
spec Complement = UnitInterval
then op compl __ : UnitInterval -> UnitInterval
     . compl 0 = 1
     . compl 1 = 0

%% abstract total functions with application and extensionality
spec Function[sort Domain][sort Codomain] =
     sort Function
     %% application operation
     op __@__ : Function * Domain -> Codomain
     vars A, B: Function
     . A = B <=> forall x : Domain . A @ x = B @ x %(extensionality)%

%% * Type-1 fuzzy sets, with lifted junctors

%% type-1 fuzzy sets over a domian and a unit interval
spec FuzzySet[sort Domain] given UnitInterval =
     Function[sort Domain][sort UnitInterval] with Function |-> FuzzySet
then
     preds __subseteq__, __subset__ : FuzzySet * FuzzySet
     vars A, B: FuzzySet
     . A subseteq B <=> forall x : Domain . A @ x <= B @ x
     . A subset B <=> not A = B /\ A subseteq B

%% construct a singleton fuzzy set
spec Sing[sort Domain] given UnitInterval = FuzzySet[sort Domain]
then op Sing __ : Domain -> FuzzySet
     var r, s : Domain
     . Sing r @ s = 1 when r = s else 0
     sort Sing =
     { x : FuzzySet
       . exists r: Domain . Sing r = x }

%% pointwise lift a norm (i.e. a monoton junctor) to a function over fuzzy sets
spec LiftJunctor[MonotoneJunctor][sort Domain] given UnitInterval =
     FuzzySet[sort Domain]
then
     op liftedJunctor : FuzzySet * FuzzySet -> FuzzySet, comm, assoc %implied
     vars x : Domain; A, B: FuzzySet
     . liftedJunctor(A, B) @ x = J(A @ x, B @ x) %(liftedJunctor_def)%

%% a T-Norm lifted to an intersection function
spec Intersection[TNorm][sort Domain] given UnitInterval =
     LiftJunctor[TNorm fit J |-> T ][sort Domain]
     with liftedJunctor |-> __intersection__

%% a T-Conorm lifted to a union function
spec Union[TConorm][sort Domain] given UnitInterval =
     LiftJunctor[TConorm fit J |-> C ][sort Domain]
     with liftedJunctor |-> __union__

%% ** Fuzzy numbers

%% define various subsorts of functions from Rat
spec PreFuzzyNumber = FuzzySet[sort Rat] with FuzzySet |-> PreFuzzyNumber

%% properties are still left open here
spec QuasiFuzzyNumber = PreFuzzyNumber
then sort QuasiFuzzyNumber =
     { x : PreFuzzyNumber
       . true %(convex)%
       /\ true %(piecewise_continuous)% }

%% proper fuzzy numbers are normalized
spec FuzzyNumber = QuasiFuzzyNumber
then sort FuzzyNumber =
     { x : QuasiFuzzyNumber
       . exists r : Rat . x @ r = 1 %(normalized)% }

%% *** Special fuzzy numbers

%% trapezoidal fuzzy numbers
spec Trapez = FuzzyNumber
then op trapez : Rat * Rat * Rat * Rat ->? FuzzyNumber
     vars x, a, b, c, d : Rat; t : FuzzyNumber
     . a <= b /\ b <= c /\ c <= d => def trapez(a, b, c, d)
     . x <= a /\ t = trapez(a, b, c, d)
       => t @ x = 0
     . a < x /\ x <= b /\ t = trapez(a, b, c, d)
       => t @ x = (x - a) / (b - a)
     . b <= x /\ x <= c /\ t = trapez(a, b, c, d)
       => t @ x = 1
     . c < x /\ x <= d /\ t = trapez(a, b, c, d)
       => t @ x = (d - x) / (d - c)
     . d <= x /\ t = trapez(a, b, c, d)
       => t @ x = 0

%% triangular fuzzy numbers
spec Triangle = Trapez
then op triangle : Rat * Rat * Rat ->? FuzzyNumber
     vars a, b, c : Rat
     . triangle (a, b, c) = trapez(a, b, b, c)

%% piecewise quadratic fuzzy numbers

%% normal quadratic fuzzy numbers

%% * Type-2 fuzzy sets

%% type-2 fuzzy sets
spec FuzzySet2[sort Universe][sort Domain] given UnitInterval =
     FuzzySet[sort Domain]
and  Function[sort Universe][sort FuzzySet] with Function |-> FuzzySet2

%% a T-Norm lifted to a type-2 fuzzy set intersection function
spec Intersection2[TNorm][sort Universe][sort Domain] given UnitInterval =
     Intersection[TNorm][sort Domain]
and  FuzzySet2[sort Universe][sort Domain]
then %% an intersection function for type-2 fuzzy sets
     op __intersection2__ : FuzzySet2 * FuzzySet2 -> FuzzySet2
     vars x : Universe; A, B: FuzzySet2
     . (A intersection2 B) @ x = (A @ x) intersection (B @ x) %(intersection2)%

%{ compute the type-1 fuzzy set that is pointwise (wrt. Domain points) maximal
   forall universe values. Here it is open how to compute the resulting fuzzy
   set using a T-conorm }%
spec MaxOverUniverse[sort Universe][sort Domain] given UnitInterval =
     FuzzySet2[sort Universe][sort Domain]
then
     %{ auxiliarly predicate to check if a confidence m is higher than the
        result of applying the type-2 fuzzy set f to any (i.e. all) universe
        values for a fixed domain point d }%
     pred higherConfidenceOverUniverse : FuzzySet2 * Domain * UnitInterval
     var f : FuzzySet2;  d : Domain; m : UnitInterval
     . higherConfidenceOverUniverse(f, d, m)
          <=> forall x : Universe . (f @ x) @ d <= m
     %{ for a fixed domain point d find all upper confidence bounds and take
        the minimal one as result. This is the usual least-upper-bound or
        supremum construction. }%
     op maxOverUniverse : FuzzySet2 -> FuzzySet
     . maxOverUniverse(f) @ d = m
          <=> higherConfidenceOverUniverse(f, d, m)
              /\ forall n : UnitInterval .
                   higherConfidenceOverUniverse(f, d, n) => m <= n

%% * Linguistic variables

%% ** Terms with an associated fuzzy set

%{instead of importing strings use a shorter abstract definition.
Alternatively import:
from Basic/CharactersAndStrings get String
}%
spec String = sort String

%% strings within terms
spec TS = String
then free type TS ::= TS(String)

%% strings for hedges
spec HS = String
then free type HS ::= HS(String)

%% strings for concepts
spec CS = String
then free type CS ::= CS(String)

%% terms constructed from basic term strings and hedge applications
spec Term = TS and HS
then free type Term ::= Leaf(TS) | Cons(HS; Term)

%% instantiate values with terms
spec LinguisticTerm[sort Domain] given UnitInterval =
     Term
and  FuzzySet[sort Domain]
then free type Value ::=
          ConfValue (rawValue : Term; cf : FuzzySet)

%% ** Hedges

%% hedges are plain truth modifier functions
spec Hedge = UnitInterval
and  Function[sort UnitInterval][sort UnitInterval] with Function |-> Hedge

%% examples are ^2 for "very" or ^1/3 for "slightly"

%% ** Components of linguistic variables

from Basic/StructuredDatatypes get Set, Bag, Map

%% sets of linguistic terms
spec LinguisticTerms[sort Domain] given UnitInterval =
     LinguisticTerm[sort Domain]
and  Set[sort Value] with pred __eps__ : Value * Set[Value]

%% associating hedge names to hedge functions
spec HedgeMap = HS and Hedge and Map[sort HS][sort Hedge]

%% map term strings to type-2 fuzzy sets
spec ConfidenceMap[sort Universe][sort Domain] given UnitInterval =
     TS
and  FuzzySet2[sort Universe][sort Domain]
and  Map[sort TS][sort FuzzySet2]
     with op lookup : TS * Map[TS, FuzzySet2] ->? FuzzySet2

%% ** Final linguistic variables

spec LinguisticVariable[sort Universe][sort Domain] given UnitInterval =
     CS
and  LinguisticTerms[sort Domain]
and  HedgeMap
and  ConfidenceMap[sort Universe][sort Domain]
then generated type LVar ::= LVar(
       name : CS;
       Set[Value];
       Map[HS, Hedge];
       Map[TS, FuzzySet2])?
     %% modify a type-2 fuzzy according to a hedge function
     %% (for type-2 fuzzy sets this is function composition)
     op modifyTruth2 : Hedge * FuzzySet2 -> FuzzySet2
     vars h : Hedge; f : FuzzySet2; x : Universe ; d : Domain
     . (modifyTruth2(h, f) @ x) @ d = h @ ((f @ x) @ d)

     %% lookup and compose the fuzzy set for a term
     op eval : Term * Map[HS, Hedge] * Map[TS, FuzzySet2] -> FuzzySet2
     vars ts : TS; hs : HS; t : Term;
          HM : Map[HS, Hedge]; CM : Map[TS, FuzzySet2]
     . eval (Leaf(ts), HM, CM) = lookup(ts, CM)
     . eval (Cons(hs, t), HM, CM)
       = modifyTruth2(lookup(hs, HM), eval(t, HM, CM))

%% * Fuzzification

spec Fuzzify[TNorm][sort Universe][sort Domain] given UnitInterval =
     LinguisticVariable[sort Universe][sort Domain]
and  Intersection2[TNorm][sort Universe][sort Domain]
and  MaxOverUniverse[sort Universe][sort Domain]
then %% only changes the confidence of the terms in the linguistic variables
     op fuzzify : FuzzySet2 * LVar -> LVar
     vars cname : CS; %% unchanged concept name
          A : FuzzySet2; %% input
          HM : Map[HS, Hedge]; %% fixed hedge map
          CM : Map[TS, FuzzySet2]; %% confidence map
          S, Ta : Set[Value]; %% terms before and after fuzzification
     %{ For all term strings t from S take the minimum (i.e. intersection2) of
        the input A and the corresponding type-2 fuzzy set looked up in the
        confidence map CM.  From the minimum type-2 fuzzy set choose the
        maximum over the universe fuzzy set as new confidence for t and put
        the new value into the result set TA. }%
     . fuzzify(A, LVar(cname, S, HM, CM)) = LVar(cname, Ta, HM, CM)
       <=> forall t : Term .
            (exists v : FuzzySet . ConfValue(t, v) eps S)
            <=> ConfValue(t, maxOverUniverse(A intersection2 eval(t, HM, CM)))
                eps Ta

%% * Defuzzification

%% ** Constraining a linguistic variable

%% create a constant type-2 fuzzy set from a type-1 fuzzy set
spec Const[sort Universe][sort Domain] given UnitInterval =
     FuzzySet2[sort Universe][sort Domain]
then op Const __ : FuzzySet -> FuzzySet2
     var x : Universe; v : FuzzySet
     . Const v @ x = v

%% constraining the confidence map of a linguistic variable wrt. its terms
spec Constrain[TNorm][sort Universe][sort Domain] given UnitInterval =
     LinguisticVariable[sort Universe][sort Domain]
and  Intersection2[TNorm][sort Universe][sort Domain]
and  Const[sort Universe][sort Domain]
then op constrain : LVar -> LVar
     vars cname : CS; %% unchanged concept name
          S : Set[Value]; %% unchanged terms
          %% avoid the letter T because that's the T-Norm
          HM : Map[HS, Hedge]; %% fixed hedge map
          CM, CCM : Map[TS, FuzzySet2]; %% (constrained) confidence map
     . constrain(LVar(cname, S, HM, CM)) = LVar(cname, S, HM, CCM)
       <=> forall t : Term; v : FuzzySet .
            eval(t, HM, CCM)
            = Const v intersection2 eval(t, HM, CM)
              when ConfValue(t, v) eps S else eval(t, HM, CM)

%% ** Aggregation

%% aggregation functions (being symmetric via a bag input)
spec AggregationFunction = UnitInterval
and  Bag[sort UnitInterval]
then op h : Bag[UnitInterval] -> UnitInterval
     var S : Bag[UnitInterval]; v, v0 : UnitInterval
     . not v = v0 /\  freq(S, v) = 0 /\ freq(S, v0) > 0
       => h(S) = v0 %(idempotent)%
     . v > 0 /\ freq(S, v) = 0 /\ freq(S, 0 as UnitInterval) > 0
       => h(S) = 0  %(all_zero)%  %% implied
     . v < 1 /\ freq(S, v) = 0 /\ freq(S, 1 as UnitInterval) > 0
       => h(S) = 1  %(all_one)%   %% implied
     . v0 <= v
       => h(S + v0) <= h(S + v) %(monotonic)%
     . true %(continuous)%

%% AggregationFunction could be made a formal parameter
spec LiftedAggregationFunction[sort Domain] given UnitInterval =
     AggregationFunction
and  FuzzySet[sort Domain]
and  Bag[sort FuzzySet]
then %% a generic map function over bags is of no help here
     %% because instances for all elements d of the domain are needed
     op mapToUBag : Domain * Bag[FuzzySet] -> Bag[UnitInterval]
     var d : Domain
     . mapToUBag(d, {}) = {}
     var B : Bag[FuzzySet]; f : FuzzySet
     . mapToUBag(d, B + f) = mapToUBag(d, B) + (f @ d)
     op liftedH : Bag[FuzzySet] -> FuzzySet
     . liftedH(B) @ d = h(mapToUBag(d, B))

%% aggregate a linguistic variable using a suitable aggregation function
spec Aggregation[sort Universe][sort Domain] given UnitInterval =
     LiftedAggregationFunction[sort Domain]
and  LinguisticVariable[sort Universe][sort Domain]
and  Bag[sort Term]
and  Bag[sort FuzzySet2]
then %% convert a set of terms to a bag of term names
     op setToBag : Set[Value] -> Bag[Term]
     . setToBag({}) = {}
     vars S : Set[Value]; t : Term; v : FuzzySet
     . setToBag(S + ConfValue(t, v)) = setToBag(S) + t

     %% create a bag of type-2 fuzzy sets from a confidence map
     op mapToCBag : Map[HS, Hedge] * Map[TS, FuzzySet2] * Bag[Term]
          -> Bag[FuzzySet2]
     vars HM : Map[HS, Hedge]; CM : Map[TS, FuzzySet2]
     . mapToCBag(HM, CM, {}) = {}
     var B : Bag[Term]
     . mapToCBag(HM, CM, B + t) = mapToCBag(HM, CM, B) + eval(t, HM, CM)

     %% extract a bag of type-1 fuzzy sets for a universe point
     %% this is implemented in the same way as mapToUBag
     op mapToSBag : Universe * Bag[FuzzySet2] -> Bag[FuzzySet]
     var r : Universe
     . mapToSBag (r, {}) = {}
     vars NB : Bag[FuzzySet2]; A : FuzzySet2
     . mapToSBag (r, NB + A) = mapToSBag (r, NB) + (A @ r)

     %% construct a type-2 fuzzy sets from a bag of type-2 fuzzy set
     %% using liftedH
     op aggregate : Bag[FuzzySet2] -> FuzzySet2
     . aggregate(NB) @ r = liftedH(mapToSBag(r, NB))

     %% putting the above together
     op aggreg : LVar -> FuzzySet2
     vars cname : CS; HM : Map[HS, Hedge]
     . aggreg (LVar(cname, S, HM, CM))
       = aggregate(mapToCBag(HM, CM, setToBag(S)))

%% any function that extracts a (central) universe value from a type-2 fuzzy set
spec Projection[sort Universe][sort Domain] given UnitInterval =
     FuzzySet2[sort Universe][sort Domain]
then op project : FuzzySet2 -> Universe

%% defuzzification is aggregation followed by projection
spec Defuzz[sort Universe][sort Domain] given UnitInterval =
     Aggregation[sort Universe][sort Domain]
and  Projection[sort Universe][sort Domain]
then op defuzz : LVar -> Universe
     var L : LVar
     . defuzz(L) = project(aggreg(L))
