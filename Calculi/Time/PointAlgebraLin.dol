library Calculi/Time/PointAlgebraLin
version 0.4
%author: S. Woelfl
%date: 22-06-2005
%%

%left_assoc __cup__,__cap__
%prec {__cup__} < {__cmps__}
%prec {__cmps__} < {__cmpl__}

from Calculi/Algebra/BooleanAlgebra get
        BooleanAlgebraWithCompl,
        ExtBooleanAlgebraByOrderRelations,
        AtomicBooleanAlgebra
from Calculi/Algebra/RelationAlgebra get
        AtomicRelationAlgebra,
        IntegralRelationAlgebra,
        SymmetricRelationAlgebra
from Calculi/Algebra/RelationAlgebraSymbolic get
        CompositionTable,
        GroundingCompositionTable,
        SetRepresentationOfRelations,
        ConstructPseudoRelationAlgebra,
        ConstructExtPseudoRelationAlgebra
from Calculi/Algebra/RelationAlgebraModel get
        AlgebraOfBinaryRelations,
        JEPDBaseRelationModel,
        BaseRelationModel,
        ConstructPseudoModelFromBaseRelationModel,
        ConstructModelFromBaseRelationModel,
        CompositionClosedBaseRelationModel,
        CheckCompositionClosedBaseRelationModel
from Calculi/Time/LinearFlowOfTime get
        DnsLinFlowOfTimeSEnd,
        LinFlowOfTime,
        NTLinFlowOfTime

%%from Calculi/Time/FlowOfTime get
%%      ExtFlowOfTimeByConvexity,
%%      ExtFlowOfTimeBySetRelations


%(  Part I: Symbolic Level

    We start by describing the symbolic level of the point algebra
    of linear time (abbrev. by PAlin), i.e., the set of base relations
    and the composition table. Arbitrary relations of PAlin are
    represented as sets of base relations. In turn base relations are
    represented by their respective singleton sets. The spec
    BooleanAlgebraOfPAlinRelations builds this set of all relations,
    which obviously forms an atomic Boolean algebra. Via the composition
    table we then define a relation algebra on the set of all relations.
    This provides us with a specification of PAlin, namely spec
    PAlin.
)%

%(
     The Point Algebra for linear flows of time has three base relations,
     namely, p ("precedes"), pi ("precedes inverse"), and e ("equals").
)%


spec PAlinBaseRelations = %mono
     free type BaseRel ::= p | pi | e
end

%(   The following spec encodes the composition table of PAlin as well as
     the information on inverses of base relations.
)%


spec PAlinCompositionTable =
     sort BaseRel
     ops p,pi,e: BaseRel
and
     CompositionTable with op id |-> e
then
     . inv(p) = pi                                      %(inv_p)%
     . inv(pi) = p                                      %(inv_pi)%
     . inv(e) = e                                       %(sym_e)%
     . p cmps p  = p                                    %(cmps_pp)%
     . p cmps pi = 1                                    %(cmps_ppi)%
     . p cmps e  = p                                    %(cmps_pe)%
     . pi cmps p  = 1                                   %(cmps_pip)%
     . pi cmps pi = pi                                  %(cmps_pipi)%
     . pi cmps e  = pi                                  %(cmps_pie)%
     . e cmps p  = p                                    %(cmps_ep)%
     . e cmps pi = pi                                   %(cmps_epi)%
     . e cmps e  = e                                    %(cmps_ee)%
end


view PAlinCompositionTable_as_GroundingCompositionTable :
     GroundingCompositionTable to PAlinCompositionTable
=
     id |-> e
end


spec BooleanAlgebraOfPAlinRelations =
     SetRepresentationOfRelations[PAlinBaseRelations]
end

view BooleanAlgebraOfPAlinRelations_as_AtomicBooleanAlgebra :
     {AtomicBooleanAlgebra hide preds __<__, __<=__, __>__, __>=__}
     to BooleanAlgebraOfPAlinRelations
=
     Elem |-> Rel, AtomElem |-> BaseRel
end


spec PAlin =
     ConstructPseudoRelationAlgebra[PAlinBaseRelations]
        [PAlinCompositionTable fit op id:BaseRel |-> e]
end


spec RichPAlin =
     ConstructExtPseudoRelationAlgebra[PAlinBaseRelations]
        [PAlinCompositionTable fit op id:BaseRel |-> e]
end


view PAlin_as_AtomicRelationAlgebra :
     AtomicRelationAlgebra to
     RichPAlin
=
     AtomRel |-> BaseRel, id |-> e
end


view PAlin_as_IntegralRelationAlgebra :
     IntegralRelationAlgebra to RichPAlin
=
     id |-> e
end


view PAlin_as_SymmetricRelationAlgebra :
     SymmetricRelationAlgebra to RichPAlin
=
     id |-> e
end


%(  Part II: Semantic Level

    Following we describe how models of PAlin can be constructed from
    dense linear flows of time without endpoints.
)%



logic HasCASL

spec PAlinBaseRelationModel[LinFlowOfTime] = %def
     BaseRelationModel[LinFlowOfTime fit Elem |-> Instant]
then %def
     ops pRel,eRel,piRel:Relation
     free type BaseRel ::= pRel | eRel | piRel

     forall x,y:Instant
     . (x,y) isIn rep(pRel)  <=> x pre y
     . (x,y) isIn rep(eRel)  <=> x = y
     . (x,y) isIn rep(piRel) <=> y pre x
end


%( A linear flow of time provides a JEPDBaseRelationModel only if it contains
   at least 2 elements
)%


view JEPDBaseRelationModel_From_PAlinBaseRelationModel[NTLinFlowOfTime]:
     JEPDBaseRelationModel
to
     PAlinBaseRelationModel[NTLinFlowOfTime]
=    sort Elem |-> Instant
end




view CompositionClosedBaseRelationModel_From_PAlinBaseRelationModel[DnsLinFlowOfTimeSEnd]:
     CheckCompositionClosedBaseRelationModel to
     {  ConstructPseudoModelFromBaseRelationModel[
                PAlinBaseRelationModel[LinFlowOfTime] fit Elem |-> Instant]
        then %def
        ops id:Rel;
            inv__:BaseRel -> Rel;
             __cmps__:BaseRel * BaseRel -> Rel
        }
=    Elem |-> Instant
end



spec PAlinModel_DnsSEnd[DnsLinFlowOfTimeSEnd] = %def
     ConstructModelFromBaseRelationModel[
        PAlinBaseRelationModel[LinFlowOfTime] fit Elem |-> Instant]
then %def
      ops  inv__ : BaseRel -> BaseRel;
         __cmps__: BaseRel * BaseRel -> Rel
end




view PAlinModel_DnsSEnd_ExtModels_PAlinCompositionTable[DnsLinFlowOfTimeSEnd] :
     PAlinCompositionTable
to
     PAlinModel_DnsSEnd[DnsLinFlowOfTimeSEnd]
=
     ops p |-> pRel, pi |-> piRel, e |-> eRel
end



view DnsLinFlowOfTimeSEnd_induces_AlgebraOfBinaryRelations[DnsLinFlowOfTimeSEnd] :
     AlgebraOfBinaryRelations
to
     PAlinModel_DnsSEnd[DnsLinFlowOfTimeSEnd]
=
     Elem |-> Instant
end



view DnsLinFlowOfTimeSEnd_induces_ModelOfPAlin[DnsLinFlowOfTimeSEnd] :
     PAlin
to
    PAlinModel_DnsSEnd[DnsLinFlowOfTimeSEnd]
=
    ops p |-> pRel, pi |-> piRel, e |-> eRel
end
