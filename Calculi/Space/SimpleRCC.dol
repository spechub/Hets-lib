library SimpleRCC

spec RCC_FO =
     sort Region
     pred __C__ : Region * Region;

     forall x, y : Region
     . x C x                                                 %(C_reflex)%
     . x C y => y C x                                           %(C_sym)%
     . (forall z : Region . z C x <=> z C y) => x = y            %(C_id)%

spec ExtRCC_FO = RCC_FO then %def
     preds  __P__ : Region * Region
     forall x, y : Region
     . (forall z : Region . z C x => z C y) <=> x P y           %(P_def)%
     . x P y => x C y                               %(P_impl_C)% %implied

logic HasCASL

from HasCASL/Real get Real

spec MetricSpace = Real then
     sort Space
     op distance : Space * Space -> Real
     forall x, y, z : Space
     . distance(x, y) = 0 <=> x = y                             %(MS_id)%
     . distance(x, y) = distance(y, x)                         %(MS_sym)%
     . distance(x, z) <= distance(x, y) + distance(y, z)  %(MS_triangle)%

spec ClosedBall = MetricSpace then %def
  sort ClosedBall
  ops closedBall : Space * Real ->? ClosedBall;
  pred covers : ClosedBall * Space
  forall x, y : Space;  r : Real;  a, b : ClosedBall
  . r > 0 /\ a = closedBall(x, r)
    => (covers (a, y) <=> distance(x, y) <= r)          %(CB_covers_pos)%
  . r > 0 <=> def closedBall(x, r)                             %(CB_def)%
  . (forall z : Space . covers (a, z) <=> covers (b, z))
    => a = b                                                    %(CB_id)%
  . exists z : Space; t : Real . a = closedBall(z,t)

view RCC_FO_in_ClosedBall :
     RCC_FO to
     { ClosedBall then %def
         pred __C__ : ClosedBall * ClosedBall
         forall a, b : ClosedBall
         . a C b <=> exists x : Space . covers(a, x) /\ covers(b, x)  %(C_def)%
     } = Region |-> ClosedBall
