library Ontology/Dolce/DolceModel
version 1.0

from Ontology/Dolce/DolceSimpl_Esort 
	 get Taxonomy, Partial_Order, Ext_Partial_Order,
         Ext_Overlap_or_Connection, Classical_Extensional_Parthood,
         Classical_Extensional_Parthood_No, Temporary_Parthood_Eternal,
         Time_Mereology, Unary_Temporal_Dissective, Being_Present,
         Mereology, Mereology_and_TemporalPart, Binary_Present,
         Binary_Temporal_Dissective, Temporary_Partial_Order,
         Temporary_Strict_Partial_Order, Temporary_Parthood_No, Temporary_Parthood, TP_NoSum_Eternal,
         Temporary_Mereology, Constitution_Spec,
         Constantly_Generically_Constituted, Constitution, Participation,
         Direct_Quality_Spec, Direct_Quality, Immediate_Quale_Spec,
         Immediate_Quale, Temporary_Quale_Spec, Temporary_Quale, 
         Specific_Dependence, Mutual_Specific_Dependence,
         OneSide_Specific_Dependence, Generic_Dependence,
         Mutual_Generic_Dependence, OneSide_Generic_Dependence, Dependence,
         Strongly_Non_Empty, Cumulative, Anti_Cumulative, Homeomerous,
 		 Anti_Homeomerous, Atomic, Anti_Atomic, PreDolce, Dolce




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

arch spec Parthood_Model =
  units
	TM                 : Time_Mereology;
	TP_SC     : {Temporary_Parthood_Eternal[sort SC]} given TM;
	TP_SAG    : {Temporary_Parthood_Eternal[sort SAG]} given TM;
	TP_NASO   : {Temporary_Parthood with s |-> NASO and OneSide_Generic_Dependence with s1 |-> NASO, s2 |-> SC} 
							given  TP_SC;
	TP_APO    : {Temporary_Parthood_Eternal[sort APO] and OneSide_Generic_Dependence with s1 |-> SAG, 
							s2 |-> APO} given TP_SAG;
	TP_F      : {Temporary_Parthood_Eternal[sort F]} given TM;
      
	TP_NAPO   : {Temporary_Parthood with s |-> NAPO and
                               OneSide_Generic_Dependence with s1 |-> F, 
							s2 |-> NAPO} given TP_F;
	TP_ASO    : {Temporary_Parthood_No with s |-> ASO
				and 
				{
				 free type ASO ::= sort SC | sort SAG
				}
                               } 
                                given TP_SC, TP_SAG;
	TP_MOB    : {Temporary_Parthood with s |-> MOB and
                               OneSide_Specific_Dependence with s1 |-> MOB, 
				s2 |-> APO} 
				given TP_APO;
	TP_SOB    : {TP_NoSum_Eternal[sort SOB] 
				and
				{
				 free type SOB ::= sort ASO | sort NASO}
			       } given TP_NASO, TP_ASO;
        TP_POB    : {TP_NoSum_Eternal[sort POB]
				and
				{
				 free type POB ::= sort APO | sort NAPO
				}
			       } given TP_MOB, TP_NAPO;
        TP_NPOB   : {TP_NoSum_Eternal[sort NPOB]
				and
				{
				 free type NPOB ::= sort SOB | sort MOB
				}
			       } given TP_SOB, TP_MOB;
        TP_M      : {Temporary_Parthood with s |-> M} given
                               TP_POB;
        TP_NPED   : {TP_NoSum_Eternal[sort NPED]
				and
				{
				 sort NPOB < NPED
				}
			       } given TP_NPOB;
        TP_PED    : {TP_NoSum_Eternal[sort PED]
				and
				{
				 free type PED ::= sort POB | sort M | sort F
				}
			       } given TP_M;
        TP_ED     : {Temporary_Parthood with s |-> ED
				and
				{
				 esort AS;
				 free type ED ::= sort PED | sort NPED | sort AS
				}
			       } given TP_PED, TP_NPED;
        ACC : {Classical_Extensional_Parthood_No with s |-> ACC}
        ACH : {Classical_Extensional_Parthood_No with s |-> ACH}
        EV : {Classical_Extensional_Parthood_No with s |-> EV
              then free type EV ::= sort ACC | sort ACH}
             given ACC, ACH
        ST : {Classical_Extensional_Parthood_No with s |-> ST}
        PRO : {Classical_Extensional_Parthood_No with s |-> PRO}
        STV : {Classical_Extensional_Parthood_No with s |-> STV
              then free type STV ::= sort ST | sort PRO}
             given ST, PRO
	CEP_PD : {{Classical_Extensional_Parthood and sort s} with s |-> PD
                   then free type PD ::= sort EV | sort STV}
                 given TP_ED, EV, STV;
        Particip           : Participation given CEP_PD;
        Mereology_and_TemporalPartPD : Mereology_and_TemporalPart given Particip;
  result  Mereology_and_TemporalPartPD
end


arch spec Constitution_Model =
   units  ParthoodM : arch spec Parthood_Model;
          TP_ED = ParthoodM;
          TP_NPED = ParthoodM;

          DependenceAQNPED   : {{Mutual_Specific_Dependence with s1 |-> AQ, 
				 s2 |-> NPED}
                                 and
                                 {Direct_Quality_Spec with s1 |-> AQ, s2 |-> NPED}
                               } given TP_ED, TP_NPED;
          ConstitutionPD     : {Constitution_Spec with s |-> PD} given ParthoodM;
          ConstitutionPED    : {Constantly_Generically_Constituted with 
				s |-> PED, s1 |-> NAPO, s2 |-> M 	
                               and  Constantly_Generically_Constituted with 
				s |-> PED, s1 |-> APO, s2 |-> NAPO}
                               given ParthoodM;
          ConstitutionNPED   : {Constantly_Generically_Constituted with 
				s |-> NPED, s1 |-> SC, s2 |-> SAG} given ParthoodM, DependenceAQNPED;
          ConstitutionED     : {Constitution_Spec with s |-> ED} given TP_ED;
          Constitution       = ConstitutionPD and ConstitutionPED and
                               ConstitutionNPED and ConstitutionED;
   result Constitution           
end

arch spec PreDolce_Model = 
     
units     Constitution: arch spec Constitution_Model;
      
          TM = Constitution;
          TP_EDSAR = Constitution;

          TP_ED =  TP_EDSAR;

          TP_PED = Constitution;


          Particip = Constitution;

          DependenceAQNPED = Constitution;

          MereologyAR = Constitution;

          ImmediateQuale     : {{Immediate_Quale then sorts TL < TQ; T < TR}
                                and
                                {Direct_Quality_Spec with s1 |-> TQ, s2 |-> PD}
                                then
                                  esorts TL < TQ
                                  forall y:PD
                                  . exists x:TL.dqt(x,y)
                                } given TM;

	  BinTempDisS	     : {Binary_Temporal_Dissective with s1 |-> S, 
				s2 |-> SL} given TP_EDSAR;
	  DependencePQPED    : {{Mutual_Specific_Dependence with s1 |-> PQ, 
				s2 |-> PED then sort SL < PQ}
                               and
                               {Direct_Quality_Spec with s1 |-> PQ, s2 |-> PED}
                               then
                                 esorts SL < PQ
                                 forall y:PED
                                 . exists x:SL.dqt(x,y)
                               } given TP_PED, BinTempDisS;
          DependenceTQPD     : {Mutual_Specific_Dependence with s1 |-> TQ, 
				s2 |-> PD} given 
                               Particip, ImmediateQuale;
	  BeingPresentEDorDP : {Being_Present with s |-> EDorPDorQ
				and
				{
				 free type Q ::= sort TQ | sort PQ | sort AQ;
				 free type EDorPDorQ ::= sort Q | sort PD | sort
				 ED
				}
			       } given DependenceTQPD, DependencePQPED, 
			       DependenceAQNPED;
          %% Temporary_Quale and binary temporal dissective
	  TempQualePR        : {Temporary_Quale_Spec with s1 |-> PR, 
				s2 |-> PQ then sort S < PR} given BeingPresentEDorDP, 
			        BinTempDisS;
          TempQualeAR        : {Temporary_Quale_Spec with s1 |-> AR, 
				s2 |-> AQ} given BeingPresentEDorDP, 
			        BinTempDisS;
          TempQualeS         : {Temporary_Quale_Spec with s1 |-> S, s2 |-> SL}
                                given BeingPresentEDorDP, BinTempDisS;
          TempQuale          = TempQualePR and TempQualeAR and TempQualeS;
          BinTempDisPR       : {Binary_Temporal_Dissective with s1 |-> PR, 
				s2 |-> PQ }
				%{ and 
				{
				 esort S < PR
				}% 
                                given TempQualePR;
          CEP_S  : {Classical_Extensional_Parthood with s |-> S} 
                                given BinTempDisS;

          %% AR
%%          CEP_AR : {Classical_Extensional_Parthood with s |-> AR
%%				then
%%				. exists x:AR. x in AR
%%			       } given DependenceAQNPED, TempQualeAR, MereologyAR;
	  BinTempDisAR	     : {Binary_Temporal_Dissective with s1 |-> AR, 
				s2 |-> AQ} given DependenceAQNPED, 
                                                 MereologyAR;
%%			        CEP_AR;
          %% Direct Quality
          DirectQuality      : Direct_Quality given BeingPresentEDorDP, BinTempDisS, Constitution, TempQuale, BinTempDisPR, BinTempDisAR, CEP_S
     result Constitution and DirectQuality and TempQuale 
            and BinTempDisPR and BinTempDisAR and CEP_S
end

arch spec Dolce_Model =
     units
	  PreDolce : arch spec PreDolce_Model;
	  Tax      : {Taxonomy and pred K: ED * ED * T} given PreDolce
     result Tax
end

refinement Dolce_Ref = Dolce refined to arch spec Dolce_Model
