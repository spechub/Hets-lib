logic OWL serialization Manchester

spec Node =
 ObjectProperty: hasValue
 Class: Node SubClassOf: hasValue some owl:Thing
end
spec Tree =
Node
then free {
 ObjectProperty: childInv
 ObjectProperty: child InverseOf: childInv
 Class: EmptyTree
 Class: Tree EquivalentTo: EmptyTree or
     (Node and childInv max 1 owl:Thing and child some owl:Thing and child only Tree)
  }
end

spec Stream =
Node
then cofree {
  ObjectProperty: succ
  Class: Stream EquivalentTo: Node and succ max 1 owl:Thing and succ some Stream
}
end

spec Ancestor =
  ObjectProperty: hasChild
then
free {
  ObjectProperty: ancestor Characteristics: Transitive
  ObjectProperty: ancestorInv InverseOf: ancestor
  ObjectProperty: hasChild SubPropertyOf: ancestorInv
  }
end
